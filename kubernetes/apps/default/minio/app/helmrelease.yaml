---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: minio
spec:
  interval: 60m
  chart:
    spec:
      chart: app-template
      version: 3.3.2
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
      interval: 60m
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      minio:
        containers:
          app:
            image:
              repository: quay.io/minio/minio
              tag: RELEASE.2024-08-03T04-33-23Z

            env:
              MINIO_UPDATE: "off"
              MINIO_BROWSER_REDIRECT_URL: "https://minio.${SECRET_DOMAIN}"
              MINIO_SERVER_URL: "https://s3.${SECRET_DOMAIN}"
              MINIO_API_CORS_ALLOW_ORIGIN: https://minio.${SECRET_DOMAIN},https://s3.${SECRET_DOMAIN}
              #MINIO_PROMETHEUS_JOB_ID: minio
              #MINIO_PROMETHEUS_URL: https://prometheus.${SECRET_DOMAIN}
              #MINIO_PROMETHEUS_AUTH_TYPE: public

            envFrom:
              - secretRef:
                  name: minio-secret

            args: ["server", "/data", "--console-address", ":9001"]

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /minio/health/live
                    port: 9000
                  initialDelaySeconds: 30
                  periodSeconds: 30
                  timeoutSeconds: 10
                  failureThreshold: 6
              readiness: *probes
            
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                memory: 100Mi
                cpu: 100m
              limits:
                memory: 2Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [10000]
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        controller: minio
        ports:
          http:
            port: 9001
          api:
            port: 9000

    serviceMonitor:
      app:
        serviceName: minio
        endpoints:
          - port: s3
            scheme: http
            path: /minio/v2/metrics/cluster
            interval: 1m
            scrapeTimeout: 10s

    ingress:
      app:
        className: internal
        annotations:
          # nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
          external-dns.alpha.kubernetes.io/target: "internal.${SECRET_DOMAIN}"
        hosts:
          - host: &console-host minio.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
          - host: &api-host s3.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
                  port: api
        tls:
          - hosts:
            - *console-host
            - *api-host

    persistence:
      config:
        type: nfs
        server: ${NFS_SERVER}
        path: /data
        globalMounts:
          - path: /data